use alloy_primitives::{Address, FixedBytes};
use alloy_rpc_types::BlockId;
use alloy_sol_types::{SolValue, sol};

use alloy_contract::private::{Network, Provider};
use anyhow::anyhow;


sol! {
    #[sol(rpc, bytecode = "6080604052346100b457610284803803809161001a826100cc565b60803960208160800191126100b4576080516001600160401b0381116100b45781609f820112156100b4576080810151916001600160401b0383116100b8578260051b916040519361006f60208501866100f2565b845260a060208501938201019182116100b45760a001915b81831061009457836101e3565b82516001600160a01b03811681036100b457815260209283019201610087565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6080601f91909101601f19168101906001600160401b038211908210176100b857604052565b601f909101601f19168101906001600160401b038211908210176100b857604052565b634e487b7160e01b5f52603260045260245ffd5b805182101561013d5760209160051b010190565b610115565b5f54680100000000000000008110156100b85760018101805f5581101561013d5760206001915f8052815f2090831b0192828060a01b03815116838060a01b03198554161784550151910155565b60406020820191602081525f5480935201905f805260205f20905f5b8181106101b95750505090565b82546001600160a01b031684526001808401546020860152604090940193600290930192016101ac565b5f5b815181101561025c576001600160a01b036102008284610129565b511631906001600160a01b036102168285610129565b5116604051604081019381851060018060401b038611176100b85761024c61025693600196604052839060018060a01b03169052565b6020820152610142565b016101e5565b604051602081019061027f8161027184610190565b03601f1981018352826100f2565b5190f3fe")]
    contract ETHBalance {
        struct Balance {
        address owner;
        uint256 balance;
    }
    constructor(address[] memory owners) {}
    }
}

sol! {
    #[sol(rpc, bytecode = "6080604052346100b857610330803803809161001a826100d0565b60803960408160800191126100b857608051906001600160401b0382116100b85780609f830112156100b8576080820151916001600160401b0383116100bc578260051b906040519361007060208401866100f6565b845260a060208501928201019283116100b85760a001905b8282106100a0578361009a60a061012a565b90610226565b602080916100ad8461012a565b815201910190610088565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6080601f91909101601f19168101906001600160401b038211908210176100bc57604052565b601f909101601f19168101906001600160401b038211908210176100bc57604052565b604051906101286040836100f6565b565b51906001600160a01b03821682036100b857565b634e487b7160e01b5f52603260045260245ffd5b80518210156101665760209160051b010190565b61013e565b908160209103126100b8575190565b6040513d5f823e3d90fd5b5f54680100000000000000008110156100bc5760018101805f558110156101665760206001915f8052815f2090831b0192828060a01b03815116838060a01b03198554161784550151910155565b60406020820191602081525f5480935201905f805260205f20905f5b8181106101fc5750505090565b82546001600160a01b031684526001808401546020860152604090940193600290930192016101ef565b905f5b82518110156103085761024c61023f8285610152565b516001600160a01b031690565b9061026c61026061026061023f8488610152565b6001600160a01b031690565b6040516370a0823160e01b81526001600160a01b038516600482015290602090829060249082905afa928315610303576001936102cf925f916102d5575b506102c56102b6610119565b6001600160a01b039093168352565b6020820152610185565b01610229565b6102f6915060203d81116102fc575b6102ee81836100f6565b81019061016b565b5f6102aa565b503d6102e4565b61017a565b604051602081019061032b8161031d846101d3565b03601f1981018352826100f6565b5190f3fe")]
    contract ERC20Balance {
        struct TokenBalance {
            address token;
            uint256 balance;
        }
    constructor(address[] memory tokens, address owner) {}
    }
}

sol! {
    #[sol(rpc, bytecode = "6080604052346101c057602061034b803803809161001c826101d8565b608039126101c0576080516001600160a01b038116908190036101c0576040516395d89b4160e01b8152905f82600481845afa91821561014b575f926101a4575b506040516306fdde0360e01b81525f81600481855afa90811561014b575f91610182575b506040516318160ddd60e01b815291602083600481845afa90811561014b576004935f92610150575b506020906040519485809263313ce56760e01b82525afa91821561014b576100f3935f9361011a575b506100dc610226565b9485526020850152604084015260ff166060830152565b604051610116816101086020820194856102ff565b03601f198101835282610203565b5190f35b61013d91935060203d602011610144575b6101358183610203565b8101906102c2565b915f6100d3565b503d61012b565b6102a8565b602091925061017490823d841161017b575b61016c8183610203565b8101906102b3565b91906100aa565b503d610162565b61019e91503d805f833e6101968183610203565b810190610237565b5f610081565b6101b99192503d805f833e6101968183610203565b905f61005d565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6080601f91909101601f19168101906001600160401b038211908210176101fe57604052565b6101c4565b601f909101601f19168101906001600160401b038211908210176101fe57604052565b60405190610235608083610203565b565b6020818303126101c0578051906001600160401b0382116101c0570181601f820112156101c0578051906001600160401b0382116101fe5760405192610287601f8401601f191660200185610203565b828452602083830101116101c057815f9260208093018386015e8301015290565b6040513d5f823e3d90fd5b908160209103126101c0575190565b908160209103126101c0575160ff811681036101c05790565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b60208152608060ff6060610337610321865185602088015260a08701906102db565b6020870151868203601f190160408801526102db565b946040810151828601520151169101529056fe")]
    contract GetERC20Info {
    struct ERC20Info {
        string symbol;
        string name;
        uint256 totalSupply;
        uint8 decimals;
    }
    constructor(address token) {}
    }
}

sol! {
    #[sol(rpc, bytecode = "6080604052346100ac57610592803803809161001a826100c4565b60803960208160800191126100ac57608051906001600160401b0382116100ac5780609f830112156100ac5781608001519061005582610123565b9261006360405194856100ef565b82845260a0602085019360051b8201019182116100ac5760a001915b81831061008c578361034f565b82516001600160a01b03811681036100ac5781526020928301920161007f565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6080601f91909101601f19168101906001600160401b038211908210176100ea57604052565b6100b0565b601f909101601f19168101906001600160401b038211908210176100ea57604052565b6040519061012160a0836100ef565b565b6001600160401b0381116100ea5760051b60200190565b9061014482610123565b61015160405191826100ef565b8281528092610162601f1991610123565b015f5b81811061017157505050565b60405160a0810191906001600160401b038311818410176100ea576020926040525f8152606083820152606060408201525f60608201525f608082015282828601015201610165565b80518210156101ce5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b6020818303126100ac578051906001600160401b0382116100ac570181601f820112156100ac578051906001600160401b0382116100ea5760405192610232601f8401601f1916602001856100ef565b828452602083830101116100ac57815f9260208093018386015e8301015290565b6040513d5f823e3d90fd5b908160209103126100ac575190565b908160209103126100ac575160ff811681036100ac5790565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b602081016020825282518091526040820191602060408360051b8301019401925f915b8383106102dc57505050505090565b9091929394602080600192603f19858203018652885190848060a01b038251168152608060ff8161032f61031d8787015160a08988015260a0870190610286565b60408701518682036040880152610286565b9460608101516060860152015116910152970193019301919392906102cd565b610359815161013a565b905f5b81518110156105695780610382610375600493856101ba565b516001600160a01b031690565b5f6103a261039661039661037586896101ba565b6001600160a01b031690565b6040516395d89b4160e01b815294859182905afa9283156104f8575f9361054d575b5060045f6103db610396610396610375878a6101ba565b6040516306fdde0360e01b815292839182905afa80156104f8576004915f9161052b575b506020610415610396610396610375888b6101ba565b6040516318160ddd60e01b815293849182905afa80156104f8576004925f916104fd575b50602061044f610396610396610375898c6101ba565b60405163313ce56760e01b815294859182905afa9182156104f8576001966104ac945f946104c8575b50610493610484610112565b6001600160a01b039097168752565b60208601526040850152606084015260ff166080830152565b6104b682866101ba565b526104c181856101ba565b500161035c565b6104ea91945060203d81116104f1575b6104e281836100ef565b81019061026d565b925f610478565b503d6104d8565b610253565b61051e915060203d8111610524575b61051681836100ef565b81019061025e565b5f610439565b503d61050c565b61054791503d805f833e61053f81836100ef565b8101906101e2565b5f6103ff565b6105629193503d805f833e61053f81836100ef565b915f6103c4565b8260405161058d8161057f6020820194856102aa565b03601f1981018352826100ef565b5190f3fe")]
    contract ERC20InfoBatch {
       #[derive(Debug)]
       struct ERC20Info {
        address addr;
        string symbol;
        string name;
        uint256 totalSupply;
        uint8 decimals;
    }
    constructor(address[] memory tokens) {}
    }
}

sol! {
    #[sol(rpc, bytecode = "6080604052346100b457610429803803809161001a826100cc565b60803960208160800191126100b4576080516001600160401b0381116100b45781609f820112156100b4576080810151916001600160401b0383116100b8578260051b916040519361006f60208501866100f2565b845260a060208501938201019182116100b45760a001915b81831061009457836102ed565b82516001600160a01b03811681036100b457815260209283019201610087565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6080601f91909101601f19168101906001600160401b038211908210176100b857604052565b601f909101601f19168101906001600160401b038211908210176100b857604052565b604051906101246080836100f2565b565b634e487b7160e01b5f52603260045260245ffd5b805182101561014e5760209160051b010190565b610126565b51906001600160701b03821682036100b457565b908160609103126100b45761017b81610153565b91604061018a60208401610153565b92015163ffffffff811681036100b45790565b6040513d5f823e3d90fd5b5f5490680100000000000000008210156100b85760018201805f5582101561014e575f8052805160019290921b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b0319166001600160a01b03909416939093179092556020810151604082015160609092015160e01b6001600160e01b0319166001600160701b0390911660709290921b600160701b600160e01b031691909117177f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56490910155565b60406020820191602081525f5480935201905f805260205f20905f5b8181106102a55750505090565b82546001600160a01b031684526001808401546001600160701b038082166020880152607082901c16604087015260e01c606086015260809094019360029093019201610298565b5f5b81518110156104015780606061032961031d61031d6103106004968861013a565b516001600160a01b031690565b6001600160a01b031690565b604051630240bc6b60e21b815293849182905afa80156103fc576001926103bb915f905f5f916103c1575b6103b69293506103a99061039961036e610310898c61013a565b9561038961037a610115565b6001600160a01b039098168852565b6001600160701b03166020870152565b6001600160701b03166040850152565b63ffffffff166060830152565b6101a8565b016102ef565b5050506103b66103ea6103a99260603d81116103f5575b6103e281836100f2565b810190610167565b919350839250610354565b503d6103d8565b61019d565b6040516020810190610424816104168461027c565b03601f1981018352826100f2565b5190f3fe")]
    contract V2PoolState {

       #[derive(Debug)]
        struct PoolState {
        address pool;
        uint112 reserve0;
        uint112 reserve1;
        uint32 blockTimestampLast;
    }
    constructor(address[] memory pools) {}
    }
}

sol! {
    #[sol(rpc, bytecode = "6080604052346102bf576060610651803803809161001c826102d7565b608039126102bf5761002c610344565b61003660a061035a565b61004060c061035a565b61006e61004d6080610336565b606481526101f46020820152610bb86040820152612710606082015261036e565b6001600160a01b03909216915f5b5f54811015610298578060206100a66100976100e294610452565b905462ffffff9160031b1c1690565b604051630b4c774160e11b81526001600160a01b0380881660048301528616602482015262ffffff909116604482015292839081906064820190565b0381885afa91821561021e575f92610278575b506001600160a01b03821680610111575b50600191500161007c565b604051630dfe168160e01b815292602084600481855afa93841561021e575f94610258575b5060405163d21220a760e01b815291602083600481845afa92831561021e575f93610223575b5060206004916040519283809263ddca3f4360e01b82525afa94851561021e576001956101e2946101dd935f926101e8575b506101c16101d192936101b16101a2610325565b6001600160a01b039098168852565b6001600160a01b03166020870152565b6001600160a01b03166040850152565b62ffffff166060830152565b6104bd565b5f610106565b6101d192506102106101c19160203d8111610217575b6102088183610302565b8101906104a2565b925061018e565b503d6101fe565b610497565b6004919350610249602091823d8111610251575b6102418183610302565b810190610480565b93915061015c565b503d610237565b61027191945060203d8111610251576102418183610302565b925f610136565b61029191925060203d8111610251576102418183610302565b905f6100f5565b60405160208101906102bb816102ad846105ba565b03601f198101835282610302565b5190f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6080601f91909101601f19168101906001600160401b038211908210176102fd57604052565b6102c3565b601f909101601f19168101906001600160401b038211908210176102fd57604052565b60405190610334608083610302565b565b906103346040519283610302565b608051906001600160a01b03821682036102bf57565b51906001600160a01b03821682036102bf57565b5f5460045f55806004106103d9575b505f80525f5160206106315f395f51905f525f915f5b600481106103a057505055565b909260206103d06001926103b6875161ffff1690565b908560030262ffffff809160031b9316831b921b19161790565b94019101610393565b5f80525f5160206106315f395f51905f5280546001600160601b03168155600a60099290920191909104017f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5645b818110610433575061037d565b5f8155600101610426565b634e487b7160e01b5f52603260045260245ffd5b905f5482101561047b575f8052600a8083045f5160206106315f395f51905f5201920660030290565b61043e565b908160209103126102bf576104949061035a565b90565b6040513d5f823e3d90fd5b908160209103126102bf575162ffffff811681036102bf5790565b600154680100000000000000008110156102fd57600181018060015581101561047b5760015f5281516003919091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810180546001600160a01b03199081166001600160a01b039485161790915560208401517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf78301805490921690841617905560408301517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf89091018054606090940151919092166001600160b81b03199093169290921760a09290921b62ffffff60a01b16919091179055565b6040602082019160208152600154809352019060015f5260205f20905f5b8181106105e55750505090565b82546001600160a01b039081168552600180850154821660208701526002850154918216604087015260a09190911c62ffffff166060860152608090940193600390930192016105d856fe290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563")]
    contract GetV3Pools {

   #[derive(Debug)]
    struct V3Pool {
        address addr;
        address token0;
        address token1;
        uint24 fee;
    }
    constructor(address factory, address tokenA, address tokenB) {}
    }
}

sol! {
    #[sol(rpc, bytecode = "60806040523461010257610b64803803809161001a8261011a565b60803980608001906020811261010257608051916001600160401b0383116101025780609f84011215610102576080830151916001600160401b038311610106576040519361006f60208560051b0186610177565b83855260a0602086019460071b8201019283116101025760a001925b82841061009857846104fa565b60808085840301126101025760206080916040516100b581610140565b86516100c0816101ac565b8152828701516100cf816101ac565b8382015260408701516100e1816101ac565b60408201526100f2606088016101bd565b606082015281520193019261008b565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6080601f91909101601f19168101906001600160401b0382119082101761010657604052565b608081019081106001600160401b0382111761010657604052565b6101e081019081106001600160401b0382111761010657604052565b601f909101601f19168101906001600160401b0382119082101761010657604052565b604051906101aa6101e083610177565b565b6001600160a01b0381160361010257565b51908160020b820361010257565b634e487b7160e01b5f52603260045260245ffd5b5f5490680100000000000000008210156101065760018201805f558210156103ba575f805280516101aa926103a0916101c091600b91600c9091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630190610267906001600160a01b03165b82546001600160a01b0319166001600160a01b03909116178255565b6020850151600182015560408501516002820155606085015160038201556080850151600482015560a0850151600582015560c0850151600682015560e08501516007820180546001600160801b0319166001600160801b039092169190911790556101008501516103109060088301906102ea906001600160a01b031661024b565b610120870151815460a09190911b62ffffff60a01b1662ffffff60a01b19909116179055565b6101408501516009820155610373600a820161034761033461016089015160010b90565b829061ffff198254169061ffff16179055565b610180870151815460109190911b62010000600160901b031662010000600160901b0319909116179055565b6101a0850151910180546001600160801b0319166001600160801b03909216919091178155920151151590565b815460ff60801b191690151560801b60ff60801b16179055565b6101cb565b60406020820191602081525f5480935201905f805260205f20905f5b8181106103e85750505090565b909192600c6101e082610414600194610407895460018060a01b031690565b6001600160a01b03169052565b838701546020820152600287015460408201526003870154606082015260048701546080820152600587015460a0820152600687015460c082015260078701546001600160801b031660e0820152600887015460a085811b86900382166001600160a01b03166101008401521c60020b61012082015260098701546101408201526104bd600a8801546104af610160840182880b60010b9052565b60101c600f0b610180830152565b600b8701546001600160801b03608086901b8690038216166101a08301526104ef9060801c60ff1615156101c0830152565b0194019291016103db565b5f5b815181101561094c5760208160051b83010151610517610973565b50805161053a9061052e906001600160a01b031681565b6001600160a01b031690565b604051633850c7bd60e01b815260e081600481855afa918215610817575f915f93610915575b5061058d61057b610575606087015160020b90565b85610a71565b9060ff8260020b60081d60010b921690565b5060405163f30dba9360e01b8152600285900b60048201529161010083602481845afa948515610817575f94875f955f5f915f9a6108d2575b5082516105ee9061052e9081906020906001600160a01b03169601516001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03851660048201529b906020908d9060249082905afa9b8c15610817575f9c6108ac575b506040810151610685916020916106599061064b9061052e906001600160a01b031681565b91516001600160a01b031690565b6040516370a0823160e01b81526001600160a01b03909116600482015292839190829081906024820190565b03915afa908115610817575f9161088e575b5060405163f305839960e01b81526020816004818b5afa908115610817575f91610870575b50604051634614131960e01b8152916020836004818c5afa928315610817575f93610850575b50604051630d34328160e11b8152956020876004818d5afa968715610817576107399a8c915f9961081c575b5060405163299ce14b60e11b815260019290920b6004830152909a6020918c91829081906024820190565b03915afa998a15610817575f9a6107e7575b5061075461019a565b6001600160a01b0390911681529d8e9060208201526040015260608d015260808c015260a08b015260c08a01526001600160801b031660e08901526001600160a01b031661010088015260020b61012087015261014086015260010b610160850152600f0b6101808401526001600160801b03166101a083015215156101c08201526107df906101df565b6001016104fc565b610809919a5060203d8111610810575b6108018183610177565b810190610b40565b985f61074b565b503d6107f7565b610a66565b60209291995061084190833d8111610849575b6108398183610177565b810190610b4f565b98909161070e565b503d61082f565b61086991935060203d8111610810576108018183610177565b915f6106e2565b610888915060203d8111610810576108018183610177565b5f6106bc565b6108a6915060203d8111610810576108018183610177565b5f610697565b610685919c506108ca602091823d8111610810576108018183610177565b9c9150610626565b939850505094506108fc9196506101003d811161090e575b6108f48183610177565b810190610acf565b9b969a95999492505f91506105c69050565b503d6108ea565b909250610939915060e03d8111610945575b6109318183610177565b8101906109fc565b5050505050915f610560565b503d610927565b604051602081019061096f81610961846103bf565b03601f198101835282610177565b5190f35b604051906109808261015b565b5f6101c0838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a08201520152565b519061ffff8216820361010257565b5190811515820361010257565b908160e0910312610102578051610a12816101ac565b91610a1f602083016101bd565b91610a2c604082016109e0565b91610a39606083016109e0565b91610a46608082016109e0565b9160a082015160ff811681036101025760c0610a639193016109ef565b90565b6040513d5f823e3d90fd5b60020b9060020b908115610aa757627fffff1981145f19831416610a93570590565b634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52601260045260245ffd5b51906001600160801b038216820361010257565b91908261010091031261010257610ae582610abb565b91602081015180600f0b8103610102579160408201519160608101519160808201518060060b8103610102579160a0810151610b20816101ac565b9160c082015163ffffffff811681036101025760e0610a639193016109ef565b90816020910312610102575190565b9081602091031261010257610a6390610abb56fe")]
    contract V3PoolState {

   #[derive(Debug)]
    struct Pool {
        address pool;
        address token0;
        address token1;
        int24 tickSpacing;
    }

       #[derive(Debug)]
        struct PoolData {
        address pool;
        uint256 token0Balance;
        uint256 token1Balance;
        uint256 feeGrowthGlobal0X128;
        uint256 feeGrowthGlobal1X128;
        uint256 feeGrowthOutside0X128;
        uint256 feeGrowthOutside1X128;
        uint128 liquidity;
        uint160 sqrtPriceX96;
        int24 tick;
        uint256 tickBitmap;
        int16 wordPos;
        int128 liquidityNet;
        uint128 liquidityGross;
        bool initialized;
    }
    constructor(Pool[] memory pools) {}
    }
}

sol! {
    #[sol(rpc, bytecode = "6080604052346100de5761094c803803809161001a826100f6565b6080398060800190604081126100de57608051916001600160401b0383116100de5780609f840112156100de576080830151916001600160401b0383116100e2576040519361006f60208560051b0186610137565b83855260a0602086019460061b8201019283116100de5760a001925b8284106100a3578461009d60a061018b565b90610544565b6040608085840301126100de57602060409182516100c08161011c565b865181526100cf83880161016c565b8382015281520193019261008b565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6080601f91909101601f19168101906001600160401b038211908210176100e257604052565b604081019081106001600160401b038211176100e257604052565b601f909101601f19168101906001600160401b038211908210176100e257604052565b6040519061016a61018083610137565b565b51908160020b82036100de57565b6001600160a01b038116036100de57565b519061016a8261017a565b634e487b7160e01b5f52603260045260245ffd5b80518210156101be5760209160051b010190565b610196565b519062ffffff821682036100de57565b91908260809103126100de5781516101ea8161017a565b916101f76020820161016c565b916102106060610209604085016101c3565b93016101c3565b90565b6040513d5f823e3d90fd5b60020b9060020b90811561025457627fffff1981145f19831416610240570590565b634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52601260045260245ffd5b908160209103126100de575190565b51906001600160801b03821682036100de57565b908160209103126100de5761021090610277565b91908260409103126100de5760206102b683610277565b92015180600f0b81036100de5790565b91908260409103126100de576020825192015190565b5f5490680100000000000000008210156100e25760018201805f558210156101be57600961042661016061016a945f8052600a60205f2091020193805185556020810151600186015560408101516002860155606081015160038601556080810151600486015561037c61035960a083015160018060801b031690565b6005870180546001600160801b0319166001600160801b03909216919091179055565b60c081015160068601805460e084015160a01b62ffffff60a01b166001600160a01b039093166001600160b81b0319909116179190911790556101008101516007860155610418600886016103ec6103d961012085015160010b90565b829061ffff198254169061ffff16179055565b610140830151815460109190911b62010000600160901b031662010000600160901b0319909116179055565b01516001600160801b031690565b910180546001600160801b0319166001600160801b03909216919091179055565b60406020820191602081525f5480935201905f805260205f20905f5b8181106104705750505090565b909192600a610180600192865481528387015460208201526002870154604082015260038701546060820152600487015460808201526104cc6104bc600589015460018060801b031690565b6001600160801b031660a0830152565b600687015460a085811b86900382166001600160a01b031660c08401521c60020b60e082015260078701546101008201526105256008880154610517610120840182880b60010b9052565b60101c600f0b610140830152565b60098701546001600160801b0316610160820152019401929101610463565b906001600160a01b03165f5b825181101561092457610589608061056883866101aa565b515160405180938192633205590760e21b8352600483019190602083019252565b0381865afa90811561081f575f905f926108ef575b50610615906105d96105c76105c160206105b8888b6101aa565b51015160020b90565b8561021e565b9060ff8260020b60081d60010b921690565b506020816105e7878a6101aa565b515160405163071f32d360e21b8152600481019190915260019190910b602482015293849081906044820190565b0381895afa801561081f57610659935f916108c1575b506020610638878a6101aa565b51516040518096819263fa6793d560e01b8352600483019190602083019252565b03818a5afa93841561081f575f9461088f575b508460406106ac959661067f898c6101aa565b515182516332bb6ad560e21b8152600481019190915260029190910b602482015295869081906044820190565b03818b5afa93841561081f576106f2965f965f96610859575b5060406106d28a8d6101aa565b51518151809a81926313d8a71960e31b8352600483019190602083019252565b03818d5afa801561081f578a8a8d5f9b5f94610824575b506107489261071b60409389936101aa565b51518351809581948293634515dcf360e11b8452600484019092916020906040830194835260020b910152565b03915afa91821561081f578b8e5f935f956107e7575b5090610769916101aa565b51519a61077461015a565b9b8c5260208c015260408b015260608a015260808901526001600160801b031660a08801526001600160a01b031660c087015260020b60e086015261010085015260010b610120840152600f0b6101408301526001600160801b03166101608201526107df906102dc565b600101610550565b61080f91955061076992945060403d8111610818575b6108078183610137565b8101906102c6565b9490939161075e565b503d6107fd565b610213565b6040929c50879194509261071b61084a61074895853d8111610818576108078183610137565b9e909e96935093505092610709565b90955061087e91965060403d8111610888575b6108768183610137565b81019061029f565b959095945f6106c5565b503d61086c565b6106ac94506108b49060203d81116108ba575b6108ac8183610137565b81019061028b565b9361066c565b503d6108a2565b6108e2915060203d81116108e8575b6108da8183610137565b810190610268565b5f61062b565b503d6108d0565b6106159250610915915060803d811161091d575b61090d8183610137565b8101906101d3565b50509161059e565b503d610903565b60405160208101906109478161093984610447565b03601f198101835282610137565b5190f3fe")]
    contract V4PoolState {

   #[derive(Debug)]
    struct Pool {
        bytes32 pool;
        int24 tickSpacing;
    }

    #[derive(Debug)]
    struct PoolData {
        bytes32 pool;
        uint256 feeGrowthGlobal0;
        uint256 feeGrowthGlobal1;
        uint256 feeGrowthOutside0X128;
        uint256 feeGrowthOutside1X128;
        uint128 liquidity;
        uint160 sqrtPriceX96;
        int24 tick;
        uint256 tickBitmap;
        int16 wordPos;
        int128 liquidityNet;
        uint128 liquidityGross;
    }
    constructor(Pool[] memory pools, address stateView) {}
    }
}


sol! {
    #[sol(rpc, bytecode = "6080604052346100a6576102e5803803809161001a826100be565b60803960408160800191126100a657608051906001600160401b0382116100a65780609f830112156100a65781608001516100548161010c565b9261006260405194856100e9565b81845260a0602085019260051b8201019283116100a65760a001905b828210610096578361009060a0610123565b906101f4565b815181526020918201910161007e565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6080601f91909101601f19168101906001600160401b038211908210176100e457604052565b6100aa565b601f909101601f19168101906001600160401b038211908210176100e457604052565b6001600160401b0381116100e45760051b60200190565b51906001600160a01b03821682036100a657565b906101418261010c565b61014e60405191826100e9565b828152809261015f601f199161010c565b0190602036910137565b805182101561017d5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b908160209103126100a657516001600160801b03811681036100a65790565b6040513d5f823e3d90fd5b60206040818301928281528451809452019201905f5b8181106101de5750505090565b82518452602093840193909201916001016101d1565b80516001600160a01b039092169161020b90610137565b5f5b82518110156102bc578060206102266102469386610169565b516040518094819263fa6793d560e01b8352600483019190602083019252565b0381885afa80156102b7576001925f91610289575b50828060801b031661026e575b0161020d565b6102788185610169565b516102838285610169565b52610268565b6102aa915060203d81116102b0575b6102a281836100e9565b810190610191565b5f61025b565b503d610298565b6101b0565b506040516102e0816102d26020820194856101bb565b03601f1981018352826100e9565b5190f3fe")]
    contract GetV4Pools {

    constructor(bytes32[] memory pools, address stateView) {}
    }
}


/// Query the ETH balance for the given addresses
///
/// If `block` is None, the latest block is used
pub async fn get_eth_balances<P, N>(
   client: P,
   block: Option<BlockId>,
   addresses: Vec<Address>,
) -> Result<Vec<ETHBalance::Balance>, anyhow::Error>
where
   P: Provider<N> + Clone + 'static,
   N: Network,
{
   let block = block.unwrap_or(BlockId::latest());
   let deployer = ETHBalance::deploy_builder(client, addresses).block(block);
   let res = deployer.call_raw().await?;

   let data = <Vec<ETHBalance::Balance> as SolValue>::abi_decode(&res)
      .map_err(|e| anyhow!("Failed to decode ETH balances: {:?}", e))?;

   Ok(data)
}

/// Query the balance of multiple ERC20 tokens for the given owner
///
/// If `block` is None, the latest block is used
pub async fn get_erc20_balances<P, N>(
   client: P,
   block: Option<BlockId>,
   owner: Address,
   tokens: Vec<Address>,
) -> Result<Vec<ERC20Balance::TokenBalance>, anyhow::Error>
where
   P: Provider<N> + Clone + 'static,
   N: Network,
{
   let block = block.unwrap_or(BlockId::latest());
   let deployer = ERC20Balance::deploy_builder(client, tokens, owner).block(block);
   let res = deployer.call_raw().await?;

   let data = <Vec<ERC20Balance::TokenBalance> as SolValue>::abi_decode(&res)
      .map_err(|e| anyhow!("Failed to decode token balances: {:?}", e))?;
   Ok(data)
}

/// Query the ERC20 token info for the given token
pub async fn get_erc20_info<P, N>(client: P, token: Address) -> Result<GetERC20Info::ERC20Info, anyhow::Error>
where
   P: Provider<N> + Clone + 'static,
   N: Network,
{
   let deployer = GetERC20Info::deploy_builder(client, token);
   let res = deployer.call_raw().await?;

   let data = <GetERC20Info::ERC20Info as SolValue>::abi_decode(&res)
      .map_err(|e| anyhow!("Failed to decode token info: {:?}", e))?;

   Ok(data)
}

/// Query the ERC20 token info for the given tokens
pub async fn get_erc20_tokens<P, N>(
   client: P,
   tokens: Vec<Address>,
) -> Result<Vec<ERC20InfoBatch::ERC20Info>, anyhow::Error>
where
   P: Provider<N> + Clone + 'static,
   N: Network,
{
   let deployer = ERC20InfoBatch::deploy_builder(client, tokens);
   let res = deployer.call_raw().await?;

   let data = <Vec<ERC20InfoBatch::ERC20Info> as SolValue>::abi_decode(&res)
      .map_err(|e| anyhow!("Failed to decode token info: {:?}", e))?;

   Ok(data)
}

/// Query the reserves for the given v2 pools
///
/// If `block` is None, the latest block is used
pub async fn get_v2_pool_reserves<P, N>(
   client: P,
   block: Option<BlockId>,
   pools: Vec<Address>,
) -> Result<Vec<V2PoolState::PoolState>, anyhow::Error>
where
   P: Provider<N> + Clone + 'static,
   N: Network,
{
   let block = block.unwrap_or(BlockId::latest());
   let deployer = V2PoolState::deploy_builder(client, pools).block(block);
   let res = deployer.call_raw().await?;

   let data = <Vec<V2PoolState::PoolState> as SolValue>::abi_decode(&res)
      .map_err(|e| anyhow!("Failed to decode V2 pool reserves: {:?}", e))?;

   Ok(data)
}

/// Retrieve all V3 pools for tokenA and tokenB based on the fee tiers
///
/// If no pools exists it will return an empty vector
pub async fn get_v3_pools<P, N>(
   client: P,
   token_a: Address,
   token_b: Address,
   factory: Address,
) -> Result<Vec<GetV3Pools::V3Pool>, anyhow::Error>
where
   P: Provider<N> + Clone + 'static,
   N: Network,
{
   let deployer = GetV3Pools::deploy_builder(client, factory, token_a, token_b);
   let res = deployer.call_raw().await?;

   let data = <Vec<GetV3Pools::V3Pool> as SolValue>::abi_decode(&res)
      .map_err(|e| anyhow!("Failed to decode V3 pools: {:?}", e))?;

   Ok(data)
}

/// Verify that the given pool ids are valid
/// 
/// Returns the pool ids that are valid
pub async fn get_v4_pools<P, N>(
   client: P,
   pools: Vec<FixedBytes<32>>,
   state_view: Address,
) -> Result<Vec<FixedBytes<32>>, anyhow::Error>
where
   P: Provider<N> + Clone + 'static,
   N: Network,
{
   let deployer = GetV4Pools::deploy_builder(client, pools, state_view);
   let res = deployer.call_raw().await?;

   let data = <Vec<FixedBytes<32>> as SolValue>::abi_decode(&res)
      .map_err(|e| anyhow!("Failed to decode V4 pools: {:?}", e))?;

   Ok(data)
}

/// Query the state of multiple V3 pools
///
/// If `block` is `None`, the latest block is used.
pub async fn get_v3_state<P, N>(
   client: P,
   block: Option<BlockId>,
   pools: Vec<V3PoolState::Pool>,
) -> Result<Vec<V3PoolState::PoolData>, anyhow::Error>
where
   P: Provider<N> + Clone + 'static,
   N: Network,
{
   let block = block.unwrap_or(BlockId::latest());
   let deployer = V3PoolState::deploy_builder(client, pools).block(block);
   let res = deployer.call_raw().await?;

   let data = <Vec<V3PoolState::PoolData> as SolValue>::abi_decode(&res)
      .map_err(|e| anyhow!("Failed to decode V3 pool data: {:?}", e))?;

   Ok(data)
}

/// Query the state of multiple V4 pools
///
/// If `block` is `None`, the latest block is used.
pub async fn get_v4_pool_state<P, N>(
   client: P,
   pools: Vec<V4PoolState::Pool>,
   state_view: Address,
   block: Option<BlockId>,
) -> Result<Vec<V4PoolState::PoolData>, anyhow::Error>
where
   P: Provider<N> + Clone + 'static,
   N: Network,
{
   let block = block.unwrap_or(BlockId::latest());
   let deployer = V4PoolState::deploy_builder(client, pools, state_view).block(block);
   let res = deployer.call_raw().await?;

   let data = <Vec<V4PoolState::PoolData> as SolValue>::abi_decode(&res)
      .map_err(|e| anyhow!("Failed to decode V4 pool data: {:?}", e))?;

   Ok(data)
}

#[cfg(test)]
mod tests {
   use super::*;
   use crate::amm::uniswap::{UniswapPool, UniswapV3Pool, UniswapV4Pool};
   use crate::utils::address_book;
   use alloy_primitives::address;
   use alloy_provider::ProviderBuilder;
   use alloy_signer_local::PrivateKeySigner;
   use url::Url;

   #[tokio::test]
   async fn test_eth_balance() {
      let mut addresses = Vec::new();
      for _ in 0..30 {
         let addr = PrivateKeySigner::random().address();
         addresses.push(addr);
      }

      let url = Url::parse("https://reth-ethereum.ithaca.xyz/rpc").unwrap();
      let client = ProviderBuilder::new().connect_http(url);

      let balances = get_eth_balances(client, None, addresses.clone())
         .await
         .unwrap();

      assert_eq!(balances.len(), addresses.len());
   }

   #[tokio::test]
   async fn test_erc20_balance() {
      let url = Url::parse("https://reth-ethereum.ithaca.xyz/rpc").unwrap();
      let client = ProviderBuilder::new().connect_http(url);

      let weth = address_book::weth(1).unwrap();
      let usdc = address_book::usdc(1).unwrap();

      let owner = Address::ZERO;

      let tokens = vec![weth, usdc];

      let balances = get_erc20_balances(client, None, owner, tokens)
         .await
         .unwrap();

      assert_eq!(balances.len(), 2);
   }

   #[tokio::test]
   async fn test_erc20_info() {
      let url = Url::parse("https://reth-ethereum.ithaca.xyz/rpc").unwrap();
      let client = ProviderBuilder::new().connect_http(url);

      let weth = address_book::weth(1).unwrap();

      let weth_info = get_erc20_info(client.clone(), weth).await.unwrap();

      assert_eq!(&weth_info.symbol, "WETH");
      assert_eq!(&weth_info.name, "Wrapped Ether");
      assert_eq!(weth_info.decimals, 18);
   }

   #[tokio::test]
   async fn test_v2_pool_reserves() {
      let url = Url::parse("https://reth-ethereum.ithaca.xyz/rpc").unwrap();
      let client = ProviderBuilder::new().connect_http(url);

      let pool = address!("0d4a11d5EEaaC28EC3F61d100daF4d40471f1852");

      let reserves = get_v2_pool_reserves(client, None, vec![pool])
         .await
         .unwrap();

      assert_eq!(reserves.len(), 1);
   }

   #[tokio::test]
   async fn test_v3_pools() {
      let url = Url::parse("https://reth-ethereum.ithaca.xyz/rpc").unwrap();
      let client = ProviderBuilder::new().connect_http(url);

      let weth = address_book::weth(1).unwrap();
      let usdc = address_book::usdc(1).unwrap();

      let factory = address!("1F98431c8aD98523631AE4a59f267346ea31F984");

      let pools = get_v3_pools(client, weth, usdc, factory).await.unwrap();

      assert_eq!(pools.len(), 4);
   }

   #[tokio::test]
   async fn test_v4_pools() {
      let url = Url::parse("https://reth-ethereum.ithaca.xyz/rpc").unwrap();
      let client = ProviderBuilder::new().connect_http(url);

      let eth_uni = UniswapV4Pool::eth_uni();
      let usdc_usdt = UniswapV4Pool::usdc_usdt();

      let pools_ids = vec![eth_uni.pool_id(), usdc_usdt.pool_id()];
      let state_view = address_book::uniswap_v4_stateview(1).unwrap();
      let pools = get_v4_pools(client, pools_ids, state_view).await.unwrap();

      assert_eq!(pools.len(), 2);
   }

   #[tokio::test]
   async fn test_v3_pool_state() {
      let url = Url::parse("https://reth-ethereum.ithaca.xyz/rpc").unwrap();
      let client = ProviderBuilder::new().connect_http(url);

      let pool = UniswapV3Pool::weth_usdc();
      let pool_data = V3PoolState::Pool {
         pool: pool.address,
         token0: pool.currency0.address(),
         token1: pool.currency1.address(),
         tickSpacing: pool.fee.tick_spacing(),
      };

      let state = get_v3_state(client, None, vec![pool_data]).await.unwrap();

      assert_eq!(state.len(), 1);
   }

   #[tokio::test]
   async fn test_v4_pool_state() {
    let url = Url::parse("https://reth-ethereum.ithaca.xyz/rpc").unwrap();
    let client = ProviderBuilder::new().connect_http(url);

    let pool = UniswapV4Pool::eth_usdt();
    let pool_data = V4PoolState::Pool {
      pool: pool.pool_id,
      tickSpacing: pool.fee.tick_spacing(),
    };

    let state_view = address_book::uniswap_v4_stateview(1).unwrap();
    let state = get_v4_pool_state(client, vec![pool_data], state_view, None).await.unwrap();

    assert_eq!(state.len(), 1);
  }
}
