#[cfg(test)]
mod tests {
   use crate::core::{BaseFee, ZeusCtx};
   use crate::gui::ui::dapps::uniswap::swap::get_relevant_pools;
   use crate::utils::{
      swap_quoter::{get_quote, get_quote_with_split_routing},
      zeus_router::encode_swap,
   };
   use std::str::FromStr;

   use zeus_eth::alloy_sol_types::{SolCall, SolValue};
   use zeus_eth::{
      abi::zeus_router,
      alloy_primitives::{Address, Bytes, TxKind, U256},
      alloy_provider::Provider,
      alloy_rpc_types::BlockId,
      amm::uniswap::{AnyUniswapPool, UniswapPool, UniswapV2Pool, UniswapV4Pool},
      currency::{Currency, ERC20Token, NativeCurrency},
      revm_utils::*,
      utils::{NumericValue, SecureSigner, address_book},
   };

   const ROUTER_CODE: &str = "0x610120604052348015610010575f5ffd5b50604051612de8380380612de883398101604081905261002f91610088565b80516001600160a01b0390811660809081526020830151821660a0526040830151821660c0526060830151821660e052909101511661010052610121565b80516001600160a01b0381168114610083575f5ffd5b919050565b5f60a0828403128015610099575f5ffd5b5060405160a081016001600160401b03811182821017156100c857634e487b7160e01b5f52604160045260245ffd5b6040526100d48361006d565b81526100e26020840161006d565b60208201526100f36040840161006d565b60408201526101046060840161006d565b60608201526101156080840161006d565b60808201529392505050565b60805160a05160c05160e05161010051612c1b6101cd5f395f818160e6015261029001525f81816101ef0152610ba301525f81816101bc015281816107e7015281816108a10152818161096d01528181610a0f01528181610f6c01526114fd01525f81816101360152818161045401528181610628015281816109a50152610db601525f8181610189015281816110a40152818161112e0152818161117c01526112260152612c1b5ff3fe608060405260043610610096575f3560e01c806391dd734611610066578063e34e72831161004c578063e34e7283146101ab578063f73e5aab146101de578063fa461e3314610211575f5ffd5b806391dd734614610158578063ad5c464814610178575f5ffd5b806323a69e75146100a157806324856bc3146100c2578063695033f3146100d55780636afdd85014610125575f5ffd5b3661009d57005b5f5ffd5b3480156100ac575f5ffd5b506100c06100bb366004611e17565b610230565b005b6100c06100d0366004611e66565b6104ca565b3480156100e0575f5ffd5b506101087f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b348015610130575f5ffd5b506101087f000000000000000000000000000000000000000000000000000000000000000081565b61016b610166366004611f02565b6107da565b60405161011c9190611f6f565b348015610183575f5ffd5b506101087f000000000000000000000000000000000000000000000000000000000000000081565b3480156101b6575f5ffd5b506101087f000000000000000000000000000000000000000000000000000000000000000081565b3480156101e9575f5ffd5b506101087f000000000000000000000000000000000000000000000000000000000000000081565b34801561021c575f5ffd5b506100c061022b366004611e17565b610b43565b5f808080808061024287890189611fd7565b604051630b4c774160e11b81526001600160a01b03808816600483018190528188166024840181905262ffffff86166044850152989e50969c50949a50929850909650945092909110915f917f00000000000000000000000000000000000000000000000000000000000000001690631698ee8290606401602060405180830381865afa1580156102d5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102f99190612057565b9050336001600160a01b03821614801561031b57506001600160a01b03811615155b6103925760405162461bcd60e51b815260206004820152602f60248201527f50616e63616b6556335377617043616c6c6261636b3a204d73672e73656e646560448201527f72206973206e6f74206120706f6f6c000000000000000000000000000000000060648201526084015b60405180910390fd5b5f8261039e578b6103a0565b8c5b90508681146104175760405162461bcd60e51b815260206004820152602e60248201527f50616e63616b6556335377617043616c6c6261636b3a20616d6f756e74546f5060448201527f617920213d20616d6f756e74496e0000000000000000000000000000000000006064820152608401610389565b83156104b057604051631b63c28b60e11b81526001600160a01b038781166004830152838116602483015282811660448301528a811660648301527f000000000000000000000000000000000000000000000000000000000000000016906336c78516906084015f604051808303815f87803b158015610495575f5ffd5b505af11580156104a7573d5f5f3e3d5ffd5b505050506104bb565b6104bb898383610d25565b50505050505050505050505050565b5f5b838110156107d3575f8585838181106104e7576104e7612072565b9050013560f81c60f81b90505f84848481811061050657610506612072565b90506020028101906105189190612086565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525092935050507f06000000000000000000000000000000000000000000000000000000000000006001600160f81b0319841611159050806105ca5760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420636f6d6d616e6400000000000000000000000000000000006044820152606401610389565b6001600160f81b0319831661068c575f828060200190518101906105ee9190612253565b805160208201516040517f2b67b5700000000000000000000000000000000000000000000000000000000081529293506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692632b67b5709261065d923392600401612356565b5f604051808303815f87803b158015610674575f5ffd5b505af1158015610686573d5f5f3e3d5ffd5b50505050505b6001600160f81b0319838116016106a6576106a682610d78565b7ffe000000000000000000000000000000000000000000000000000000000000006001600160f81b03198416016106e0576106e082610d78565b7ffd000000000000000000000000000000000000000000000000000000000000006001600160f81b031984160161071a5761071a82610f0d565b7ffc000000000000000000000000000000000000000000000000000000000000006001600160f81b0319841601610754576107548261108b565b7ffb000000000000000000000000000000000000000000000000000000000000006001600160f81b031984160161078e5761078e8261115f565b7ffa000000000000000000000000000000000000000000000000000000000000006001600160f81b03198416016107c8576107c8826112a9565b5050506001016104cc565b5050505050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461087a5760405162461bcd60e51b815260206004820152603460248201527f556e697377617056345377617043616c6c6261636b3a204d73672e73656e646560448201527f72206973206e6f7420506f6f6c4d616e616765720000000000000000000000006064820152608401610389565b5f6108878385018561245a565b90505f5f610894836113d1565b60208501515191935091507f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b031661093757806001600160a01b03166311da60b4836040518263ffffffff1660e01b815260040160206040518083038185885af115801561090c573d5f5f3e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061093191906125b0565b50610a97565b8360200151610140015115610a03578351602085015151604051631b63c28b60e11b81526001600160a01b0392831660048201527f000000000000000000000000000000000000000000000000000000000000000083166024820152848316604482015290821660648201527f0000000000000000000000000000000000000000000000000000000000000000909116906336c78516906084015f604051808303815f87803b1580156109e8575f5ffd5b505af11580156109fa573d5f5f3e3d5ffd5b50505050610a34565b602084015151610a34907f000000000000000000000000000000000000000000000000000000000000000084610d25565b806001600160a01b03166311da60b46040518163ffffffff1660e01b81526004016020604051808303815f875af1158015610a71573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a9591906125b0565b505b60208481015190810151610120909101516040517f0b0d9c090000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290821660248201526044810185905290821690630b0d9c09906064015f604051808303815f87803b158015610b11575f5ffd5b505af1158015610b23573d5f5f3e3d5ffd5b5050505060405180602001604052805f8152509450505050505b92915050565b5f8080808080610b5587890189611fd7565b604051630b4c774160e11b81526001600160a01b03808816600483018190528188166024840181905262ffffff86166044850152989e50969c50949a50929850909650945092909110915f917f00000000000000000000000000000000000000000000000000000000000000001690631698ee8290606401602060405180830381865afa158015610be8573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0c9190612057565b9050336001600160a01b038216148015610c2e57506001600160a01b03811615155b610ca05760405162461bcd60e51b815260206004820152602f60248201527f556e697377617056335377617043616c6c6261636b3a204d73672e73656e646560448201527f72206973206e6f74206120706f6f6c00000000000000000000000000000000006064820152608401610389565b5f82610cac578b610cae565b8c5b90508681146104175760405162461bcd60e51b815260206004820152602e60248201527f556e697377617056335377617043616c6c6261636b3a20616d6f756e74546f5060448201527f617920213d20616d6f756e74496e0000000000000000000000000000000000006064820152608401610389565b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af18060015f511416610d6e57803d853b151710610d6e576390b8ec185f526004601cfd5b505f603452505050565b5f81806020019051810190610d8d91906125dd565b90505f610da282606001518360c0015161177e565b90508160a001515f03610ddf57610dda82337f00000000000000000000000000000000000000000000000000000000000000006117b1565b610e3d565b8160a00151600103610df557610dda8233611a14565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c696420706f6f6c2076617269616e740000000000000000000000006044820152606401610389565b5f610e5083606001518460c0015161177e565b9050818111610ea15760405162461bcd60e51b815260206004820152601c60248201527f42616420537761703a204e6f20616d6f756e74207265636569766564000000006044820152606401610389565b5f610eac8383612693565b905083602001518110156107d35760405162461bcd60e51b815260206004820152602260248201527f536c697070616765436865636b3a20496e73756666696369656e74206f7574706044820152611d5d60f21b6064820152608401610389565b5f81806020019051810190610f2291906126b1565b60208101519091505f906001600160a01b0316610f4f57506101208101516001600160a01b031631610f65565b610f62826020015183610120015161177e565b90505b610f9082337f0000000000000000000000000000000000000000000000000000000000000000611b52565b60208201515f906001600160a01b0316610fba57506101208201516001600160a01b031631610fd0565b610fcd836020015184610120015161177e565b90505b81811161101f5760405162461bcd60e51b815260206004820152601c60248201527f42616420537761703a204e6f20616d6f756e74207265636569766564000000006044820152606401610389565b5f61102a8383612693565b905083606001518110156107d35760405162461bcd60e51b815260206004820152602260248201527f536c697070616765436865636b3a20496e73756666696369656e74206f7574706044820152611d5d60f21b6064820152608401610389565b5f818060200190518101906110a091906127f9565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db082602001516040518263ffffffff1660e01b81526004015f604051808303818588803b1580156110ff575f5ffd5b505af1158015611111573d5f5f3e3d5ffd5b505083516001600160a01b03163014925061115b9150505761115b7f0000000000000000000000000000000000000000000000000000000000000000825f01518360200151610d25565b5050565b5f8180602001905181019061117491906127f9565b90505f6111a17f00000000000000000000000000000000000000000000000000000000000000003061177e565b905081602001518110156111f75760405162461bcd60e51b815260206004820181905260248201527f536c697070616765436865636b3a20496e73756666696369656e7420574554486044820152606401610389565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b15801561126f575f5ffd5b505af1158015611281573d5f5f3e3d5ffd5b505083516001600160a01b0316301491506112a490505781516112a49082611c00565b505050565b5f818060200190518101906112be9190612813565b80519091505f906001600160a01b03166113375747905081604001518110156113295760405162461bcd60e51b815260206004820152601f60248201527f536c697070616765436865636b3a20496e73756666696369656e7420455448006044820152606401610389565b6112a4826020015182611c00565b8151611343903061177e565b905081604001518110156113bf5760405162461bcd60e51b815260206004820152602960248201527f536c697070616765436865636b3a20496e73756666696369656e7420746f6b6560448201527f6e2062616c616e636500000000000000000000000000000000000000000000006064820152608401610389565b6112a4825f0151836020015183610d25565b5f5f5f5f6113ee85602001515f0151866020015160200151611c3f565b915091505f6040518060a00160405280846001600160a01b03168152602001836001600160a01b0316815260200187602001516080015162ffffff168152602001876020015160a0015160020b8152602001876020015160e001516001600160a01b031681525090505f866020015160c0015161147f5773fffd8963efd1fc6a506488495d951d5263988d25611486565b6401000276ad5b90505f6040518060600160405280896020015160c00151151581526020018960200151604001516114b690612860565b81526001600160a01b03808516602092830152908a015161010001516040517ff3cd914c0000000000000000000000000000000000000000000000000000000081529293507f0000000000000000000000000000000000000000000000000000000000000000925f9284169163f3cd914c91611539918991889190600401612896565b6020604051808303815f875af1158015611555573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061157991906125b0565b60208b0151516040517fa58411940000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291925083169063a5841194906024015f604051808303815f87803b1580156115db575f5ffd5b505af11580156115ed573d5f5f3e3d5ffd5b505050505f8a6020015160c0015161160e5761160982600f0b90565b611618565b6116188260801d90565b90505f81600f0b1261166c5760405162461bcd60e51b815260206004820152601860248201527f56343a20506f73697469766520696e7075742064656c746100000000000000006044820152606401610389565b61167581612923565b6fffffffffffffffffffffffffffffffff1698508a602001516040015189146116e05760405162461bcd60e51b815260206004820152601b60248201527f56343a20616d6f756e74546f50617920213d20616d6f756e74496e00000000006044820152606401610389565b5f8b6020015160c001516116fd576116f88360801d90565b611707565b61170783600f0b90565b90505f81600f0b1361175b5760405162461bcd60e51b815260206004820152601960248201527f56343a204e65676174697665206f75747075742064656c7461000000000000006044820152606401610389565b806fffffffffffffffffffffffffffffffff169a50505050505050505050915091565b5f816014526f70a082310000000000000000000000005f5260208060246010865afa601f3d111660205102905092915050565b8261010001511561183b57608083015183516040808601519051631b63c28b60e11b81526001600160a01b0386811660048301529384166024820152918316604483015282166064820152908216906336c78516906084015f604051808303815f87803b158015611820575f5ffd5b505af1158015611832573d5f5f3e3d5ffd5b50505050611851565b61185183604001518460800151855f0151610d25565b5f5f5f5f86608001516001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611895573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118b9919061297c565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915086606001516001600160a01b031687604001516001600160a01b0316101561190b57819350809250611912565b8093508192505b50505f61192d865f015184848960e0015162ffffff16611c72565b90505f5f87606001516001600160a01b031688604001516001600160a01b03161061195957825f61195c565b5f835b9150915087608001516001600160a01b031663022c0d9f83838b60c001515f67ffffffffffffffff811115611993576119936120c9565b6040519080825280601f01601f1916602001820160405280156119bd576020820181803683370190505b506040518563ffffffff1660e01b81526004016119dd94939291906129c8565b5f604051808303815f87803b1580156119f4575f5ffd5b505af1158015611a06573d5f5f3e3d5ffd5b505050505050505050505050565b606082015160408301516001600160a01b039182169116105f81611a4c5773fffd8963efd1fc6a506488495d951d5263988d25611a53565b6401000276ad5b905083608001516001600160a01b031663128acb088560c0015184875f01518589604001518a606001518b5f01518b8d60e001518e6101000151604051602001611adc969594939291906001600160a01b039687168152948616602086015260408501939093529316606083015262ffffff92909216608082015290151560a082015260c00190565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611b0b9594939291906129ff565b60408051808303815f875af1158015611b26573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b4a9190612a48565b505050505050565b5f6040518060400160405280846001600160a01b03168152602001858152509050816001600160a01b03166348c8949182604051602001611b939190612a6a565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401611bbe9190611f6f565b5f604051808303815f875af1158015611bd9573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107d39190810190612b6a565b80471015611c155763b12d13eb5f526004601cfd5b5f385f388486620186a0f161115b57815f526073600b5360ff6020536016600b82f061115b573838fd5b5f5f826001600160a01b0316846001600160a01b03161015611c65575082905081611c6b565b50819050825b9250929050565b5f5f8511611ce85760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152608401610389565b5f84118015611cf657505f83115b611d685760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152608401610389565b5f600a611d76606485612b9c565b611d8290612710612693565b611d8c9190612b9c565b90505f611d998288612bbb565b90505f611da68683612bbb565b90505f82611db6896103e8612bbb565b611dc09190612bd2565b9050611dcc8183612b9c565b9998505050505050505050565b5f5f83601f840112611de9575f5ffd5b50813567ffffffffffffffff811115611e00575f5ffd5b602083019150836020828501011115611c6b575f5ffd5b5f5f5f5f60608587031215611e2a575f5ffd5b8435935060208501359250604085013567ffffffffffffffff811115611e4e575f5ffd5b611e5a87828801611dd9565b95989497509550505050565b5f5f5f5f60408587031215611e79575f5ffd5b843567ffffffffffffffff811115611e8f575f5ffd5b611e9b87828801611dd9565b909550935050602085013567ffffffffffffffff811115611eba575f5ffd5b8501601f81018713611eca575f5ffd5b803567ffffffffffffffff811115611ee0575f5ffd5b8760208260051b8401011115611ef4575f5ffd5b949793965060200194505050565b5f5f60208385031215611f13575f5ffd5b823567ffffffffffffffff811115611f29575f5ffd5b611f3585828601611dd9565b90969095509350505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f611f816020830184611f41565b9392505050565b6001600160a01b0381168114611f9c575f5ffd5b50565b62ffffff81168114611f9c575f5ffd5b8035611fba81611f9f565b919050565b8015158114611f9c575f5ffd5b8035611fba81611fbf565b5f5f5f5f5f5f60c08789031215611fec575f5ffd5b8635611ff781611f88565b9550602087013561200781611f88565b945060408701359350606087013561201e81611f88565b9250608087013561202e81611f9f565b915060a087013561203e81611fbf565b809150509295509295509295565b8051611fba81611f88565b5f60208284031215612067575f5ffd5b8151611f8181611f88565b634e487b7160e01b5f52603260045260245ffd5b5f5f8335601e1984360301811261209b575f5ffd5b83018035915067ffffffffffffffff8211156120b5575f5ffd5b602001915036819003821315611c6b575f5ffd5b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715612100576121006120c9565b60405290565b6040516060810167ffffffffffffffff81118282101715612100576121006120c9565b6040516080810167ffffffffffffffff81118282101715612100576121006120c9565b604051610160810167ffffffffffffffff81118282101715612100576121006120c9565b604051610120810167ffffffffffffffff81118282101715612100576121006120c9565b604051601f8201601f1916810167ffffffffffffffff811182821017156121bd576121bd6120c9565b604052919050565b805165ffffffffffff81168114611fba575f5ffd5b5f67ffffffffffffffff8211156121f3576121f36120c9565b50601f01601f191660200190565b5f82601f830112612210575f5ffd5b815161222361221e826121da565b612194565b818152846020838601011115612237575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f60208284031215612263575f5ffd5b815167ffffffffffffffff811115612279575f5ffd5b820180840360e081121561228b575f5ffd5b6122936120dd565b60c08212156122a0575f5ffd5b6122a8612106565b60808312156122b5575f5ffd5b6122bd612129565b925083516122ca81611f88565b835260208401516122da81611f88565b60208401526122eb604085016121c5565b60408401526122fc606085016121c5565b60608401528281526123106080850161204c565b602082015260a08401516040820152815260c0830151915067ffffffffffffffff82111561233c575f5ffd5b61234886838501612201565b602082015295945050505050565b6001600160a01b03841681525f83516001600160a01b0381511660208401526001600160a01b03602082015116604084015265ffffffffffff604082015116606084015265ffffffffffff6060820151166080840152506001600160a01b0360208501511660a0830152604084015160c083015261010060e08301526123e0610100830184611f41565b95945050505050565b8035611fba81611f88565b8060020b8114611f9c575f5ffd5b8035611fba816123f4565b5f82601f83011261241c575f5ffd5b813561242a61221e826121da565b81815284602083860101111561243e575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f6020828403121561246a575f5ffd5b813567ffffffffffffffff811115612480575f5ffd5b820160408185031215612491575f5ffd5b6124996120dd565b81356124a481611f88565b8152602082013567ffffffffffffffff8111156124bf575f5ffd5b919091019061016082860312156124d4575f5ffd5b6124dc61214c565b6124e5836123e9565b81526124f3602084016123e9565b6020820152604083810135908201526060808401359082015261251860808401611faf565b608082015261252960a08401612402565b60a082015261253a60c08401611fcc565b60c082015261254b60e084016123e9565b60e082015261010083013567ffffffffffffffff81111561256a575f5ffd5b6125768782860161240d565b6101008301525061258a61012084016123e9565b61012082015261259d6101408401611fcc565b6101408201526020820152949350505050565b5f602082840312156125c0575f5ffd5b5051919050565b8051611fba81611f9f565b8051611fba81611fbf565b5f6101208284031280156125ef575f5ffd5b506125f8612170565b82518152602080840151908201526126126040840161204c565b60408201526126236060840161204c565b60608201526126346080840161204c565b608082015260a0838101519082015261264f60c0840161204c565b60c082015261266060e084016125c7565b60e082015261267261010084016125d2565b6101008201529392505050565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610b3d57610b3d61267f565b8051611fba816123f4565b5f602082840312156126c1575f5ffd5b815167ffffffffffffffff8111156126d7575f5ffd5b820161016081850312156126e9575f5ffd5b6126f161214c565b6126fa8261204c565b81526127086020830161204c565b6020820152604082810151908201526060808301519082015261272d608083016125c7565b608082015261273e60a083016126a6565b60a082015261274f60c083016125d2565b60c082015261276060e0830161204c565b60e082015261010082015167ffffffffffffffff81111561277f575f5ffd5b61278b86828501612201565b6101008301525061279f610120830161204c565b6101208201526127b261014083016125d2565b610140820152949350505050565b5f604082840312156127d0575f5ffd5b6127d86120dd565b905081516127e581611f88565b815260209182015191810191909152919050565b5f60408284031215612809575f5ffd5b611f8183836127c0565b5f6060828403128015612824575f5ffd5b5061282d612106565b825161283881611f88565b8152602083015161284881611f88565b60208201526040928301519281019290925250919050565b5f7f800000000000000000000000000000000000000000000000000000000000000082036128905761289061267f565b505f0390565b6001600160a01b0384511681526001600160a01b03602085015116602082015262ffffff6040850151166040820152606084015160020b60608201526001600160a01b0360808501511660808201528251151560a0820152602083015160c08201526001600160a01b0360408401511660e08201526101206101008201525f6123e0610120830184611f41565b5f81600f0b7fffffffffffffffffffffffffffffffff8000000000000000000000000000000081036129575761295761267f565b5f0392915050565b80516dffffffffffffffffffffffffffff81168114611fba575f5ffd5b5f5f5f6060848603121561298e575f5ffd5b6129978461295f565b92506129a56020850161295f565b9150604084015163ffffffff811681146129bd575f5ffd5b809150509250925092565b8481528360208201526001600160a01b0383166040820152608060608201525f6129f56080830184611f41565b9695505050505050565b6001600160a01b038616815284151560208201528360408201526001600160a01b038316606082015260a060808201525f612a3d60a0830184611f41565b979650505050505050565b5f5f60408385031215612a59575f5ffd5b505080516020909101519092909150565b602081526001600160a01b0382511660208201525f6020830151604080840152612aa06060840182516001600160a01b03169052565b60208101516001600160a01b038116608085015250604081015160a0840152606081015160c0840152608081015162ffffff811660e08501525060a0810151612aef61010085018260020b9052565b5060c0810151151561012084015260e08101516001600160a01b031661014084015261010081015161016080850152612b2c6101c0850182611f41565b9050610120820151612b4a6101808601826001600160a01b03169052565b506101408201519150612b626101a085018315159052565b949350505050565b5f60208284031215612b7a575f5ffd5b815167ffffffffffffffff811115612b90575f5ffd5b612b6284828501612201565b5f82612bb657634e487b7160e01b5f52601260045260245ffd5b500490565b8082028115828204841417610b3d57610b3d61267f565b80820180821115610b3d57610b3d61267f56fea26469706673582212206471a210fc631a5990d476dd077764a803279aad5e4034b05f7b2b136df5a5ca64736f6c634300081e0033";

   #[tokio::test(flavor = "multi_thread", worker_threads = 1)]
   async fn big_swap_from_usdt_to_eth_mainnet() {
      let chain_id = 1;

      let currency_in = Currency::from(ERC20Token::usdt());
      let currency_out = Currency::from(NativeCurrency::from(chain_id));
      let amount_in = NumericValue::parse_to_wei("1000000", currency_in.decimals());

      let swap_on_v2 = true;
      let swap_on_v3 = true;
      let swap_on_v4 = true;
      let max_hops = 10;
      let max_routes = 10;
      let with_split_routing = true;

      test_swap(
         chain_id,
         amount_in,
         currency_in,
         currency_out,
         swap_on_v2,
         swap_on_v3,
         swap_on_v4,
         max_hops,
         max_routes,
         with_split_routing,
         Vec::new(),
      )
      .await
      .unwrap();
   }

   #[tokio::test(flavor = "multi_thread", worker_threads = 1)]
   async fn big_swap_from_link_to_eth_mainnet() {
      let chain_id = 1;

      let currency_in = Currency::from(ERC20Token::link());
      let currency_out = Currency::from(NativeCurrency::from(chain_id));
      let amount_in = NumericValue::parse_to_wei("10000", currency_in.decimals());

      let swap_on_v2 = true;
      let swap_on_v3 = true;
      let swap_on_v4 = true;
      let max_hops = 10;
      let max_routes = 10;
      let with_split_routing = true;

      test_swap(
         chain_id,
         amount_in,
         currency_in,
         currency_out,
         swap_on_v2,
         swap_on_v3,
         swap_on_v4,
         max_hops,
         max_routes,
         with_split_routing,
         Vec::new(),
      )
      .await
      .unwrap();
   }

   #[tokio::test(flavor = "multi_thread", worker_threads = 1)]
   async fn single_v2_swap_erc20_to_erc20_mainnet() {
      let chain_id = 1;

      let pool: AnyUniswapPool = UniswapV2Pool::weth_uni().into();
      let currency_in = Currency::from(ERC20Token::weth());
      let currency_out = pool.quote_currency().clone();
      let amount_in = NumericValue::parse_to_wei("10", currency_in.decimals());

      let swap_on_v2 = true;
      let swap_on_v3 = true;
      let swap_on_v4 = true;
      let max_hops = 2;
      let max_routes = 1;
      let with_split_routing = true;

      test_swap(
         chain_id,
         amount_in,
         currency_in,
         currency_out,
         swap_on_v2,
         swap_on_v3,
         swap_on_v4,
         max_hops,
         max_routes,
         with_split_routing,
         vec![pool],
      )
      .await
      .unwrap();
   }

   #[tokio::test(flavor = "multi_thread", worker_threads = 1)]
   async fn single_v4_swap_erc20_to_erc20_mainnet() {
      let chain_id = 1;

      let pool: AnyUniswapPool = UniswapV4Pool::usdc_usdt().into();
      let currency_in = Currency::from(ERC20Token::usdc());
      let currency_out = Currency::from(ERC20Token::usdt());
      let amount_in = NumericValue::parse_to_wei("10000", currency_in.decimals());

      let swap_on_v2 = true;
      let swap_on_v3 = true;
      let swap_on_v4 = true;
      let max_hops = 2;
      let max_routes = 1;
      let with_split_routing = true;

      test_swap(
         chain_id,
         amount_in,
         currency_in,
         currency_out,
         swap_on_v2,
         swap_on_v3,
         swap_on_v4,
         max_hops,
         max_routes,
         with_split_routing,
         vec![pool],
      )
      .await
      .unwrap();
   }

   #[tokio::test(flavor = "multi_thread", worker_threads = 1)]
   async fn swap_from_erc20_to_eth_base_chain() {
      let chain_id = 8453;

      let currency_in = Currency::from(ERC20Token::usdc_base());
      let currency_out = Currency::from(NativeCurrency::from(chain_id));
      let amount_in = NumericValue::parse_to_wei("500000", currency_in.decimals());

      let swap_on_v2 = true;
      let swap_on_v3 = true;
      let swap_on_v4 = true;
      let max_hops = 10;
      let max_routes = 10;
      let with_split_routing = false;

      test_swap(
         chain_id,
         amount_in,
         currency_in,
         currency_out,
         swap_on_v2,
         swap_on_v3,
         swap_on_v4,
         max_hops,
         max_routes,
         with_split_routing,
         Vec::new(),
      )
      .await
      .unwrap();
   }

   async fn test_swap(
      chain: u64,
      amount_in: NumericValue,
      currency_in: Currency,
      currency_out: Currency,
      swap_on_v2: bool,
      swap_on_v3: bool,
      swap_on_v4: bool,
      max_hops: usize,
      max_routes: usize,
      with_split_routing: bool,
      given_pools: Vec<AnyUniswapPool>,
   ) -> Result<(), anyhow::Error> {
      let ctx = ZeusCtx::new();
      ctx.write(|ctx| ctx.providers.all_working());

      let pools = if given_pools.is_empty() {
         let relevant_pools = get_relevant_pools(
            ctx.clone(),
            swap_on_v2,
            swap_on_v3,
            swap_on_v4,
            &currency_in,
            &currency_out,
         );
         relevant_pools
      } else {
         given_pools
      };

      let pool_manager = ctx.pool_manager();
      let updated_pools = pool_manager.update_state_for_pools(ctx.clone(), chain, pools).await?;

      let eth = Currency::from(NativeCurrency::from(chain));
      let eth_price = ctx.get_currency_price(&eth);
      let currency_out_price = ctx.get_currency_price(&currency_out);
      let base_fee = BaseFee::default();
      let priority_fee = NumericValue::parse_to_gwei("1");

      let quote = if with_split_routing {
         get_quote_with_split_routing(
            amount_in.clone(),
            currency_in.clone(),
            currency_out.clone(),
            updated_pools,
            eth_price.clone(),
            currency_out_price.clone(),
            base_fee.next,
            priority_fee.wei(),
            max_hops,
            max_routes,
         )
      } else {
         get_quote(
            amount_in.clone(),
            currency_in.clone(),
            currency_out.clone(),
            updated_pools,
            eth_price.clone(),
            currency_out_price.clone(),
            base_fee.next,
            priority_fee.wei(),
            max_hops,
         )
      };

      let slippage = 0.5;
      let swap_steps = quote.swap_steps;
      let amount_out = quote.amount_out;
      let mut min_amount_out = amount_out.clone();
      min_amount_out.calc_slippage(slippage, currency_out.decimals());

      eprintln!(
         "Quote {} {} For {} {}",
         amount_in.format_abbreviated(),
         currency_in.symbol(),
         currency_out.symbol(),
         amount_out.format_abbreviated()
      );
      eprintln!("Swap Steps Length: {}", swap_steps.len());

      for swap in &swap_steps {
         eprintln!(
            "Swap Step: {} (Wei: {}) {} -> {} (Wei: {}) {} {} ({})",
            swap.amount_in.format_abbreviated(),
            swap.amount_in.wei(),
            swap.currency_in.symbol(),
            swap.amount_out.format_abbreviated(),
            swap.amount_out.wei(),
            swap.currency_out.symbol(),
            swap.pool.dex_kind().as_str(),
            swap.pool.fee().fee()
         );
      }

      let client = ctx.get_client(chain).await?;

      let eth_balance = if currency_in.is_native() {
         amount_in.wei()
      } else {
         U256::ZERO
      };

      eprintln!("Alice ETH Balance: {}", eth_balance);
      let alice = DummyAccount::new(AccountType::EOA, eth_balance);
      let signer = SecureSigner::from(alice.key.clone());

      let block = client.get_block(BlockId::latest()).await.unwrap();
      let mut factory = ForkFactory::new_sandbox_factory(client.clone(), chain, None, None);
      factory.insert_dummy_account(alice.clone());

      if currency_in.is_erc20() {
         factory.give_token(
            alice.address,
            currency_in.address(),
            amount_in.wei(),
         )?;
      }

      let fork_db = factory.new_sandbox_fork();
      let mut evm = new_evm(chain.into(), block.as_ref(), fork_db);
      let router_addr = deploy_router(&mut evm, alice.address, chain)?;

      let swap_params = encode_swap(
         client.clone(),
         chain,
         router_addr,
         swap_steps,
         amount_in.wei(),
         min_amount_out.wei(),
         slippage,
         currency_in.clone(),
         currency_out.clone(),
         signer.clone(),
         alice.address,
      )
      .await?;

      let permit2 = address_book::permit2_contract(chain).unwrap();

      if swap_params.permit2_needs_approval {
         simulate::approve_token(
            &mut evm,
            currency_in.address(),
            alice.address,
            permit2,
            U256::MAX,
         )
         .unwrap();
      }

      let router_balance = evm.balance(router_addr).unwrap().data;
      let balance = NumericValue::format_wei(router_balance, 18);
      eprintln!(
         "Router ETH Balance Before: {}",
         balance.format_abbreviated()
      );

      evm.tx.caller = alice.address;
      evm.tx.data = swap_params.call_data.clone();
      evm.tx.value = swap_params.value.clone();
      evm.tx.kind = TxKind::Call(router_addr);

      let res = evm.transact_commit(evm.tx.clone()).unwrap();
      let output = res.output().unwrap();
      if !res.is_success() {
         let err = revert_msg(&output);
         eprintln!("Call Reverted: {}", err);
         eprintln!("Output: {:?}", output);
         eprintln!("Gas Used: {}", res.gas_used());
         panic!("Router Call Failed");
      }

      eprintln!("Router Call Successful");
      eprintln!("Gas Used: {}", res.gas_used());

      let router_balance = evm.balance(router_addr).unwrap().data;
      let balance = NumericValue::format_wei(router_balance, 18);
      eprintln!(
         "Router ETH Balance After: {}",
         balance.format_abbreviated()
      );

      let currency_out_balance = if currency_out.is_erc20() {
         simulate::erc20_balance(&mut evm, currency_out.address(), alice.address).unwrap()
      } else {
         let state = evm.balance(alice.address).unwrap();
         state.data
      };

      if currency_out_balance < min_amount_out.wei() {
         panic!(
            "TooLittleReceived, expected {} got {}",
            min_amount_out.wei(),
            currency_out_balance
         );
      }

      let balance = NumericValue::format_wei(currency_out_balance, currency_out.decimals());

      eprintln!(
         "{} Quote Amount: {}",
         currency_out.symbol(),
         amount_out.format_abbreviated()
      );

      eprintln!(
         "{} Got from Swap: {}",
         currency_out.symbol(),
         balance.format_abbreviated()
      );

      Ok(())
   }

   fn deploy_router(evm: &mut Evm2<ForkDB>, caller: Address, chain: u64) -> Result<Address, anyhow::Error> {
      let weth = address_book::weth(chain)?;
      let permit2 = address_book::permit2_contract(chain)?;
      let v4_pool_manager = address_book::uniswap_v4_pool_manager(chain)?;
      let uni_v3_factory = address_book::uniswap_v3_factory(chain)?;
      let pancake_v3_factory = address_book::pancakeswap_v3_factory(chain)?;

      let deploy_params = zeus_router::DeployParams {
         weth,
         permit2,
         v4PoolManager: v4_pool_manager,
         uniswapV3Factory: uni_v3_factory,
         pancakeSwapV3Factory: pancake_v3_factory,
      }
      .abi_encode();

      let code = Bytes::from_str(ROUTER_CODE)?;
      let bytecode = [code.as_ref(), &deploy_params].concat();

      evm.tx.caller = caller;
      evm.tx.data = bytecode.into();
      evm.tx.kind = TxKind::Create;
      evm.tx.value = U256::ZERO;

      let res = evm.transact_commit(evm.tx.clone())?;
      eprintln!("Gas Used for Deploy: {}", res.gas_used());

      let address = match res {
         ExecutionResult::Success { output, .. } => output.address().cloned(),
         _ => None,
      };

      Ok(address.unwrap())
   }

   #[tokio::test(flavor = "multi_thread", worker_threads = 1)]
   async fn test_deploy_router() {
      let ctx = ZeusCtx::new();
      ctx.write(|ctx| ctx.providers.all_working());

      let chain = 1;

      let client = ctx.get_client(chain).await.unwrap();
      let block = client.get_block(BlockId::latest()).await.unwrap().unwrap();
      let fork_factory = ForkFactory::new_sandbox_factory(client.clone(), chain, None, None);
      let fork_db = fork_factory.new_sandbox_fork();
      let mut evm = new_evm(chain.into(), Some(&block), fork_db);

      let weth = address_book::weth(chain).unwrap();
      let permit2 = address_book::permit2_contract(chain).unwrap();
      let v4_pool_manager = address_book::uniswap_v4_pool_manager(chain).unwrap();
      let uni_v3_factory = address_book::uniswap_v3_factory(chain).unwrap();
      let pancake_v3_factory = address_book::pancakeswap_v3_factory(chain).unwrap();

      let deploy_params = zeus_router::DeployParams {
         weth,
         permit2,
         v4PoolManager: v4_pool_manager,
         uniswapV3Factory: uni_v3_factory,
         pancakeSwapV3Factory: pancake_v3_factory,
      }
      .abi_encode();

      let code = Bytes::from_str(ROUTER_CODE).unwrap();
      let bytecode = [code.as_ref(), &deploy_params].concat();

      let alice = DummyAccount::new(AccountType::EOA, U256::ZERO);

      evm.tx.caller = alice.address;
      evm.tx.data = bytecode.into();
      evm.tx.kind = TxKind::Create;
      evm.tx.value = U256::ZERO;

      let res = evm.transact_commit(evm.tx.clone()).unwrap();
      eprintln!("Gas Used for Deploy: {}", res.gas_used());

      let address = match res {
         ExecutionResult::Success { output, .. } => output.address().cloned().unwrap(),
         _ => panic!("Failed to deploy router"),
      };

      eprintln!("Router Deployed At Address: {}", address);

      evm.tx.data = zeus_router::ZeusRouter::WETHCall {}.abi_encode().into();
      evm.tx.kind = TxKind::Call(address);

      let res = evm.transact_commit(evm.tx.clone()).unwrap();
      let output = res.output().unwrap();
      let weth_address =
         zeus_router::ZeusRouter::WETHCall::abi_decode_returns(output.as_ref()).unwrap();
      assert_eq!(weth_address, weth);

      evm.tx.data = zeus_router::ZeusRouter::PERMIT2Call {}.abi_encode().into();
      evm.tx.kind = TxKind::Call(address);

      let res = evm.transact_commit(evm.tx.clone()).unwrap();
      let output = res.output().unwrap();
      let permit2_address =
         zeus_router::ZeusRouter::PERMIT2Call::abi_decode_returns(output.as_ref()).unwrap();
      assert_eq!(permit2_address, permit2);

      evm.tx.data = zeus_router::ZeusRouter::V4_POOL_MANAGERCall {}.abi_encode().into();
      evm.tx.kind = TxKind::Call(address);

      let res = evm.transact_commit(evm.tx.clone()).unwrap();
      let output = res.output().unwrap();
      let v4_pool_manager_address =
         zeus_router::ZeusRouter::V4_POOL_MANAGERCall::abi_decode_returns(output.as_ref()).unwrap();
      assert_eq!(v4_pool_manager_address, v4_pool_manager);

      evm.tx.data = zeus_router::ZeusRouter::UNISWAP_V3_FACTORYCall {}.abi_encode().into();
      evm.tx.kind = TxKind::Call(address);

      let res = evm.transact_commit(evm.tx.clone()).unwrap();
      let output = res.output().unwrap();
      let uni_v3_factory_address =
         zeus_router::ZeusRouter::UNISWAP_V3_FACTORYCall::abi_decode_returns(output.as_ref())
            .unwrap();
      assert_eq!(uni_v3_factory_address, uni_v3_factory);

      evm.tx.data = zeus_router::ZeusRouter::PANCAKE_SWAP_V3_FACTORYCall {}.abi_encode().into();
      evm.tx.kind = TxKind::Call(address);

      let res = evm.transact_commit(evm.tx.clone()).unwrap();
      let output = res.output().unwrap();
      let pancake_v3_factory_address =
         zeus_router::ZeusRouter::PANCAKE_SWAP_V3_FACTORYCall::abi_decode_returns(output.as_ref())
            .unwrap();
      assert_eq!(pancake_v3_factory_address, pancake_v3_factory);
   }
}
