use zeus::core::{
   ZeusCtx,
   utils::{RT, update::get_base_fee},
};
use zeus_eth::{
   alloy_network::TransactionBuilder,
   alloy_primitives::{Bytes, TxKind, U256},
   alloy_provider::Provider,
   alloy_rpc_types::{BlockId, TransactionRequest},
   alloy_signer_local::PrivateKeySigner,
   currency::{Currency, NativeCurrency},
   revm::ExecuteCommitEvm,
   revm_utils::{ForkFactory, new_evm, revert_msg},
   types::ChainId,
   utils::{NumericValue, SecureSigner},
};

use std::io::Write;
use std::str::FromStr;
use std::time::Duration;

const CODE: &str = "0x608034610157575f80546001600160601b0319166a2710000bb80001f4000064179081905560808201908282106001600160401b038311176101435762ffffff916040528181168352818160181c166020840152818160301c16604084015260481c1660608201526001546004600155806004106100ca575b5060015f5260205f205f915f5b6004811061009f57505055604051611d7c908161015c8239f35b9092602060019162ffffff8651169062ffffff8560030260031b92831b921b19161794019101610085565b60015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf680546001600160601b03168155600a60099290920191909104017fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf75b8181106101385750610078565b5f815560010161012b565b634e487b7160e01b5f52604160045260245ffd5b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80631d2f38d6146115455780632eafebb9146113ee5780636f9f2656146112c5578063710edba8146112805780637bdb491514610c2f5780637ff9011c14610ae8578063c77ab047146108cc578063d036d02f146106b35763f886b11d1461007c575f80fd5b3461045a57604036600319011261045a576004356001600160401b03811161045a573660238201121561045a5780600401356100b781611803565b916100c560405193846117e2565b8183526024602084019260061b8201019036821161045a57602401915b81831061067357836100f261171b565b908051916100ff83611803565b9261010d60405194856117e2565b80845261011c601f1991611803565b015f5b8181106106105750506001600160a01b0316905f5b81518110156105375761014781836118f7565b51519060405191633205590760e21b83526004830152608082602481875afa9182156103d6575f905f936104d7575b506101a7610195602061018985886118f7565b51015160020b85611a85565b9060ff8260020b60081d60010b921690565b50926101b383866118f7565b5151936040519463071f32d360e21b8652600486015260010b938460248201526020816044818a5afa9081156103d6575f916104a6575b506101f584876118f7565b5151946040519563fa6793d560e01b875260048701526020866024818b5afa9586156103d6575f96610466575b509061026291604084610235888b6118f7565b515182516332bb6ad560e21b8152600481019190915260029190910b602482015293849081906044820190565b03818c5afa9182156103d65789945f945f94610416575b506040610286898c6118f7565b515160248251809981936313d8a71960e31b835260048301525afa9687156103d65788978c8c5f995f936103e1575b506040916102c86102f59b9c87936118f7565b51518351809c81948293634515dcf360e11b8452600484019092916020906040830194835260020b910152565b03915afa9a8b156103d65760019b6001600160801b03998a938f8e905f935f9561039e575b5090610325916118f7565b51519c60206040519e8f90610339826117ab565b8152015260408d015260608c015260808b01521660a0890152898060a01b031660c088015260020b60e0870152610100860152610120850152600f0b6101408401521661016082015261038c82876118f7565b5261039781866118f7565b5001610134565b6103c691955061032592945060403d81116103cf575b6103be81836117e2565b810190611add565b9490939161031a565b503d6103b4565b6040513d5f823e3d90fd5b6102f59a5085919350916102c8610406604094853d81116103cf576103be81836117e2565b9d909d9593509c9b5050916102b5565b9450925093506040833d821161045e575b81610434604093836117e2565b8101031261045a578893610453602061044c8661191f565b9501611acf565b928c610279565b5f80fd5b3d9150610427565b919095506020823d821161049e575b81610482602093836117e2565b8101031261045a576104966102629261191f565b959091610222565b3d9150610475565b90506020813d82116104cf575b816104c0602093836117e2565b8101031261045a5751886101ea565b3d91506104b3565b9250506080823d821161052f575b816104f2608093836117e2565b8101031261045a5761050382611a53565b610528606061051460208601611a67565b9461052160408201611a75565b5001611a75565b5086610176565b3d91506104e5565b836040518091602082016020835281518091526020604084019201905f5b818110610563575050500390f35b9193509160206101806001926001600160801b0361016088518051845285810151868501526040810151604085015260608101516060850152608081015160808501528260a08201511660a0850152868060a01b0360c08201511660c085015260e081015160020b60e0850152610100810151610100850152610120810151870b610120850152610140810151600f0b610140850152015116610160820152019401910191849392610555565b60209060405161061f816117ab565b5f81525f838201525f60408201525f60608201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201525f6101208201525f6101408201525f6101608201528282880101520161011f565b60408336031261045a576040519061068a82611745565b833582526020840135908160020b820361045a57826020928360409501528152019201916100e2565b3461045a57602036600319011261045a576004356001600160401b03811161045a576106e390369060040161181a565b8051906106ef82611803565b916106fd60405193846117e2565b80835261070c601f1991611803565b015f5b8181106108b55750505f5b81518110156108305760049060606001600160a01b0361073a83866118f7565b511660405193848092630240bc6b60e21b82525afa9182156103d6575f905f905f946107c7575b5060019363ffffffff916001600160701b0390816001600160a01b03610787888b6118f7565b5116956040519661079788611774565b87521660208601521660408401521660608201526107b582866118f7565b526107c081856118f7565b500161071a565b935050506060823d8211610828575b816107e3606093836117e2565b8101031261045a578163ffffffff6107fc600194611a2e565b6001600160701b0361081c604061081560208701611a2e565b9501611a42565b91939195505090610761565b3d91506107d6565b826040518091602082016020835281518091526020604084019201905f5b81811061085c575050500390f35b919350916020608060019263ffffffff60608851868060a01b0381511684526001600160701b038682015116868501526001600160701b036040820151166040850152015116606082015201940191019184939261084e565b6020906108c06119cc565b8282870101520161070f565b3461045a57606036600319011261045a576108e5611705565b6108ed61171b565b906044356001600160a01b038116919082900361045a57906001549061091282611803565b9361092060405195866117e2565b828552601f1961092f84611803565b015f5b818110610acb5750506001600160a01b0390811693165f5b8381106109d157856040518091602082016020835281518091526020604084019201905f5b81811061097d575050500390f35b825180516001600160a01b0390811686526020828101518216818801526040808401519092169187019190915260609182015162ffffff16918601919091528695506080909401939092019160010161096f565b62ffffff6109de826119f0565b90549060031b1c169060405191630b4c774160e11b83528660048401528460248401526044830152602082606481865afa80156103d6575f90610a87575b600192506001600160a01b031680610a36575b500161094a565b62ffffff610a43836119f0565b90549060031b1c1660405191610a5883611774565b82528760208301528560408301526060820152610a7582896118f7565b52610a8081886118f7565b5087610a2f565b50906020813d8211610ac3575b81610aa1602093836117e2565b8101031261045a5751906001600160a01b038216820361045a57600191610a1c565b3d9150610a94565b602090610ad99695966119cc565b82828a01015201949394610932565b3461045a57602036600319011261045a576004356001600160401b03811161045a57610b1890369060040161181a565b805190610b2482611803565b91610b3260405193846117e2565b808352610b41601f1991611803565b015f5b818110610c0c5750505f5b8151811015610bb2576001906001600160a01b03610b6d82856118f7565b5116828060a01b03610b7f83866118f7565b51163160405191610b8f83611745565b82526020820152610ba082866118f7565b52610bab81856118f7565b5001610b4f565b826040518091602082016020835281518091526020604084019201905f5b818110610bde575050500390f35b825180516001600160a01b031685526020908101518186015286955060409094019390920191600101610bd0565b602090604051610c1b81611745565b5f81525f8382015282828701015201610b44565b3461045a57602036600319011261045a576004356001600160401b03811161045a573660238201121561045a578060040135610c6a81611803565b91610c7860405193846117e2565b8183526024602084019260071b8201019036821161045a57602401915b81831061121457838051610ca881611803565b90610cb660405192836117e2565b808252610cc5601f1991611803565b015f5b8181106111fd5750505f5b82518110156110f057610ce681846118f7565b51610cef61195f565b508051604051633850c7bd60e01b81526001600160a01b039091169060e081600481855afa80156103d6575f915f91611066575b50610d42610195610d3c62ffffff606088015116611c1f565b83611a85565b50926040519163f30dba9360e01b835260020b9384600484015261010083602481855afa9485156103d6575f945f945f905f905f99610fd3575b50895160208b01516001600160a01b039182169391610dbc91610da191869116611af3565b60408d01519c51909c6001600160a01b039182169116611af3565b9260405163f305839960e01b81526020816004818c5afa9081156103d6575f91610fa2575b50604051634614131960e01b8152946020866004818d5afa9283156103d6575f93610f6e575b604051630d34328160e11b815296506020876004818e5afa9687156103d6575f97610f2e575b50602060249a6040519b8c809263299ce14b60e11b825260010b9e8f60048301525afa998a156103d6575f9a610efb575b506040519e8f91610e6e8361178f565b825260208201526040015260608d015260808c015260a08b015260c08a01526001600160801b031660e0890152600160a01b6001900316610100880152610120870152610140860152610160850152600f0b6101808401526001600160801b03166101a083015215156101c0820152610ee782846118f7565b52610ef281836118f7565b50600101610cd3565b9099506020813d8211610f26575b81610f16602093836117e2565b8101031261045a5751985f610e5e565b3d9150610f09565b99965060208a3d8211610f66575b81610f49602093836117e2565b8101031261045a576020610f5e60249b61191f565b979a50610e2d565b3d9150610f3c565b92506020863d8211610f9a575b81610f88602093836117e2565b8101031261045a576004955192610e07565b3d9150610f7b565b90506020813d8211610fcb575b81610fbc602093836117e2565b8101031261045a57515f610de1565b3d9150610faf565b9650505094509450610100833d821161105e575b81610ff561010093836117e2565b8101031261045a576110068361191f565b9461101360208501611acf565b9460408501519460608101519060808101518060060b0361045a5760e08161104060a06110549401611a53565b5061104d60c08201611a42565b5001611c12565b979695908d610d7c565b3d9150610fe7565b91505060e0813d82116110e8575b8161108160e093836117e2565b8101031261045a5761109281611a53565b61109e60208301611a67565b916110ab60408201611c03565b506110b860608201611c03565b506110c560808201611c03565b5060a081015160ff81160361045a5760c06110e09101611c12565b509087610d23565b3d9150611074565b506040518091602082016020835281518091526020604084019201905f5b81811061111c575050500390f35b9193509160206101e06001926101c08751858060a01b038151168352848101518584015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c08401526001600160801b0360e08201511660e0840152858060a01b036101008201511661010084015261012081015160020b610120840152610140810151610140840152610160810151860b610160840152610180810151600f0b6101808401526001600160801b036101a0820151166101a0840152015115156101c082015201940191019184939261110e565b60209061120861195f565b82828601015201610cc8565b60808336031261045a576040519061122b82611774565b61123484611731565b825261124260208501611731565b602083015261125360408501611731565b604083015260608401359062ffffff8216820361045a578260209260606080950152815201920191610c95565b3461045a57602036600319011261045a576112c16112ad61129f611705565b6112a7611933565b50611b18565b6040519182916020835260208301906118a3565b0390f35b3461045a57602036600319011261045a576004356001600160401b03811161045a576112f590369060040161181a565b80519061130182611803565b9161130f60405193846117e2565b80835261131e601f1991611803565b015f5b8181106113d75750505f5b8151811015611370576001906113546001600160a01b0361134d83866118f7565b5116611b18565b61135e82866118f7565b5261136981856118f7565b500161132c565b826040518091602082016020835281518091526040830190602060408260051b8601019301915f905b8282106113a857505050500390f35b919360019193955060206113c78192603f198a820301865288516118a3565b9601920192018594939192611399565b6020906113e2611933565b82828701015201611321565b3461045a57604036600319011261045a576004356001600160401b03811161045a5761141e90369060040161181a565b61142661171b565b81519161143283611803565b9261144060405194856117e2565b80845261144f601f1991611803565b015f5b8181106115225750505f5b81518110156114c8576001906001600160a01b0361147b82856118f7565b511661149885848060a01b0361149185886118f7565b5116611af3565b604051916114a583611745565b825260208201526114b682876118f7565b526114c181866118f7565b500161145d565b836040518091602082016020835281518091526020604084019201905f5b8181106114f4575050500390f35b825180516001600160a01b0316855260209081015181860152869550604090940193909201916001016114e6565b60209060405161153181611745565b5f81525f8382015282828801015201611452565b3461045a57604036600319011261045a5761155e611705565b602435906001600160401b03821161045a573660238301121561045a5781600401359161158a83611803565b9261159860405194856117e2565b8084526024602085019160051b8301019136831161045a57602401905b8282106116f55750505060018060a01b03169080516115ec6115d682611803565b916115e460405193846117e2565b808352611803565b602082019290601f19013684375f5b81518110156116b15761160e81836118f7565b51906040519163fa6793d560e01b83526004830152602082602481895afa9182156103d6575f9261166d575b506001600160801b0360019216611652575b016115fb565b61165c81846118f7565b5161166782866118f7565b5261164c565b91506020823d82116116a9575b81611687602093836117e2565b8101031261045a576001600160801b036116a260019361191f565b925061163a565b3d915061167a565b8383604051918291602083019060208452518091526040830191905f5b8181106116dc575050500390f35b82518452859450602093840193909201916001016116ce565b81358152602091820191016115b5565b600435906001600160a01b038216820361045a57565b602435906001600160a01b038216820361045a57565b35906001600160a01b038216820361045a57565b604081019081106001600160401b0382111761176057604052565b634e487b7160e01b5f52604160045260245ffd5b608081019081106001600160401b0382111761176057604052565b6101e081019081106001600160401b0382111761176057604052565b61018081019081106001600160401b0382111761176057604052565b60a081019081106001600160401b0382111761176057604052565b90601f801991011681019081106001600160401b0382111761176057604052565b6001600160401b0381116117605760051b60200190565b9080601f8301121561045a57813561183181611803565b9261183f60405194856117e2565b81845260208085019260051b82010192831161045a57602001905b8282106118675750505090565b6020809161187484611731565b81520191019061185a565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9060018060a01b038251168152608060ff816118e36118d1602087015160a0602088015260a087019061187f565b6040870151868203604088015261187f565b946060810151606086015201511691015290565b805182101561190b5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b51906001600160801b038216820361045a57565b60405190611940826117c7565b5f60808382815260606020820152606060408201528260608201520152565b6040519061196c8261178f565b5f6101c0838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a08201520152565b604051906119d982611774565b5f6060838281528260208201528260408201520152565b9060015482101561190b5760015f52600a8083047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601920660030290565b51906001600160701b038216820361045a57565b519063ffffffff8216820361045a57565b51906001600160a01b038216820361045a57565b51908160020b820361045a57565b519062ffffff8216820361045a57565b60020b9060020b908115611abb57627fffff1981145f19831416611aa7570590565b634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52601260045260245ffd5b519081600f0b820361045a57565b919082604091031261045a576020825192015190565b602460106020939284936014526370a0823160601b5f525afa601f3d11166020510290565b611b20611933565b506306fdde0360045260045f52611b3681611c85565b6395d89b4160045260045f52611b4b82611c85565b9163313ce56760045260045f5260ff60208060048185620186a0fa601f3d11166020510216915f9160018060a01b0316936040516318160ddd60e01b8152602081600481895afa5f9181611bcf575b50611bc7575b5060405194611bae866117c7565b8552602085015260408401526060830152608082015290565b92505f611ba0565b9091506020813d602011611bfb575b81611beb602093836117e2565b8101031261045a5751905f611b9a565b3d9150611bde565b519061ffff8216820361045a57565b5190811515820361045a57565b5f8054909162ffffff908116919081168211611c3d57505050600190565b62ffffff8160181c1682145f14611c5657505050600a90565b62ffffff8160301c1682145f14611c6f57505050603c90565b60481c62ffffff1603611c82575060c890565b90565b60205f60609282825191620186a0fa15611c8257506040518060200160403d1015611cea575b5f60203d806103e8106103e8821802188083853e840101535b80515f1a15611cd557600101611cc4565b818103601f190182525f815260200160405290565b5f513d601f1901811115611cff575b50611cab565b602081843e82513d829003601f1901811115611d1b5750611cf9565b90604092826020936103e8106103e88218021892839283875201903e82015f6020820152016040529056fea2646970667358221220aadf829342ef68ffea7186a1826fc0b0c45d2701778f38d8029cc75422333a7264736f6c634300081e0033";

#[tokio::main]
async fn main() {
   let ctx = ZeusCtx::new();

   let ctx_clone = ctx.clone();
   RT.spawn(async move {
      ctx_clone.test_and_measure_rpcs().await;
   });

   print!("Enter the ChainId (eg 1 for Ethereum Mainnet): ");
   std::io::stdout().flush().unwrap();
   let mut chain_id = String::new();
   std::io::stdin().read_line(&mut chain_id).unwrap();

   let chain_id = chain_id.trim();
   let chain = ChainId::new(chain_id.parse::<u64>().unwrap()).unwrap();

   print!("Paste the private key to use sign the transaction: ");
   std::io::stdout().flush().unwrap();
   let mut key = String::new();
   std::io::stdin().read_line(&mut key).unwrap();

   let signer = PrivateKeySigner::from_str(key.trim()).unwrap();

   print!("Signer address: {}\n", signer.address());
   std::io::stdout().flush().unwrap();

   // let dir = std::env::current_dir().unwrap();
   // let path = dir.join("bytecode.txt");
   // let bytecode = std::fs::read_to_string(path).unwrap();

   // print!("Loaded bytecode: {}\n", bytecode);
   // std::io::stdout().flush().unwrap();

   let code = Bytes::from_str(CODE).unwrap();

   print!("Fetching client and block...\n");
   std::io::stdout().flush().unwrap();

   let client = ctx.get_client(chain.id()).await.unwrap();
   let block = client.get_block(BlockId::latest()).await.unwrap();
   let fork_factory = ForkFactory::new_sandbox_factory(client.clone(), chain.id(), None, None);
   let fork_db = fork_factory.new_sandbox_fork();

   let mut evm = new_evm(chain, block.as_ref(), fork_db);

   println!("Simulating deployment...\n");
   std::io::stdout().flush().unwrap();

   evm.tx.caller = signer.address();
   evm.tx.data = code.clone();
   evm.tx.value = U256::ZERO;
   evm.tx.kind = TxKind::Create;

   let res = evm.transact_commit(evm.tx.clone()).unwrap();
   let gas_used = res.gas_used();

   if !res.is_success() {
      let err = revert_msg(&res.output().unwrap());
      println!("Call Reverted: {}", err);
      return;
   }

   print!("Gas Used: {}\n", gas_used);
   std::io::stdout().flush().unwrap();

   let price_manager = ctx.price_manager();
   price_manager.update_base_token_prices(ctx.clone(), chain.id()).await.unwrap();

   let eth = Currency::from(NativeCurrency::from(chain.id()));
   let eth_price = ctx.get_currency_price(&eth);

   let fee = client.get_max_priority_fee_per_gas().await.unwrap();
   let priority_fee = NumericValue::format_to_gwei(U256::from(fee));

   let base_fee = get_base_fee(ctx.clone(), chain.id()).await.unwrap();
   let gas_price = U256::from(base_fee.next) + priority_fee.wei();
   let cost_in_wei = gas_price * U256::from(gas_used);
   let cost_eth = NumericValue::format_wei(cost_in_wei, 18);
   let cost_in_usd = NumericValue::from_f64(cost_eth.f64() * eth_price.f64());

   println!(
      "Cost in USD: ${}",
      cost_in_usd.format_abbreviated()
   );
   std::io::stdout().flush().unwrap();

   print!("Procced to deploy? [y/n]: ");
   std::io::stdout().flush().unwrap();
   let mut deploy = String::new();
   std::io::stdin().read_line(&mut deploy).unwrap();

   if deploy.trim() != "y" {
      return;
   }

   print!("Sending transaction...\n");
   std::io::stdout().flush().unwrap();

   let nonce = client.get_transaction_count(signer.address()).await.unwrap();
   let value = U256::ZERO;
   let gas_limit = gas_used * 110 / 100;
   let max_fee = gas_price * U256::from(110) / U256::from(100);

   let tx = if chain.is_ethereum() || chain.is_optimism() || chain.is_base() {
      TransactionRequest::default()
         .with_from(signer.address())
         .with_chain_id(chain.id())
         .with_deploy_code(code)
         .with_value(value)
         .with_nonce(nonce)
         .with_gas_limit(gas_limit)
         .with_max_priority_fee_per_gas(priority_fee.wei().to::<u128>())
         .max_fee_per_gas(max_fee.to::<u128>())
   } else {
      TransactionRequest::default()
         .with_from(signer.address())
         .with_deploy_code(code)
         .with_chain_id(chain.id())
         .with_value(value)
         .with_nonce(nonce)
         .with_gas_limit(gas_limit)
         .with_gas_price(gas_price.to::<u128>())
   };

   let signer = SecureSigner::from(signer);
   let wallet = signer.to_wallet();
   let tx_envelope = tx.clone().build(&wallet).await.unwrap();

   let receipt = client
      .send_tx_envelope(tx_envelope)
      .await
      .unwrap()
      .with_timeout(Some(Duration::from_secs(60)))
      .get_receipt()
      .await
      .unwrap();

   let contract_address = receipt.contract_address.expect("Failed to get contract address");
   print!("Contract Deployed at: {}", contract_address);
   std::io::stdout().flush().unwrap();
}
